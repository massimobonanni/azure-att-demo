{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "secretandconfig_prefix": {
      "defaultValue": "SecretAndConfig",
      "type": "String"
    },
    "actionGroups_Application_Insights_Smart_Detection_name": {
      "defaultValue": "Application Insights Smart Detection",
      "type": "String"
    },
    "smartdetectoralertrules_failure_anomalies___secretandconfigappinsight_name": {
      "defaultValue": "failure anomalies - secretandconfigappinsight",
      "type": "String"
    },
    "location": {
      "defaultValue": "northeurope",
      "type": "String"
    }
  },
  "variables": {
    "sites_secretandconfig_name": "[toLower(parameters('secretandconfig_prefix'))]",
    "serverfarms_SecretAndConfigAppPlan_name": "[concat(parameters('secretandconfig_prefix'),'AppPlan')]",
    "vaults_SecretAndConfigKeyVault_name": "[concat(parameters('secretandconfig_prefix'), 'KeyVault')]",
    "components_SecretAndConfigAppInsight_name": "[concat(parameters('secretandconfig_prefix'), 'AppInsight')]",
    "workspaces_secretandconfiglogworkspace_name": "[concat(toLower(parameters('secretandconfig_prefix')), 'logworkspace')]",
    "configurationStores_secretandconfigappconfiguration_name": "[concat(parameters('secretandconfig_prefix'), 'AppConfiguration')]"
  },
  "resources": [
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2019-11-01-preview",
      "name": "[variables('configurationStores_secretandconfigappconfiguration_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "free"
      },
      "properties": {
        "encryption": {}
      }
    },
    {
      "type": "microsoft.insights/actionGroups",
      "apiVersion": "2019-03-01",
      "name": "[parameters('actionGroups_Application_Insights_Smart_Detection_name')]",
      "location": "Global",
      "properties": {
        "groupShortName": "SmartDetect",
        "enabled": true,
        "emailReceivers": [],
        "smsReceivers": [],
        "webhookReceivers": [],
        "itsmReceivers": [],
        "azureAppPushReceivers": [],
        "automationRunbookReceivers": [],
        "voiceReceivers": [],
        "logicAppReceivers": [],
        "azureFunctionReceivers": []
      }
    },
    {
      "type": "microsoft.insights/components",
      "apiVersion": "2015-05-01",
      "name": "[variables('components_SecretAndConfigAppInsight_name')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2016-10-01",
      "name": "[variables('vaults_SecretAndConfigKeyVault_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "Standard"
        },
        "tenantId": "5afdc82f-48ec-47e7-aeca-f21caa1537e1",
        "accessPolicies": [
          {
            "tenantId": "5afdc82f-48ec-47e7-aeca-f21caa1537e1",
            "objectId": "c62752e8-93ba-4c0a-958c-208430a1e3b5",
            "permissions": {
              "keys": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "secrets": [
                "Get",
                "List",
                "Set",
                "Delete",
                "Recover",
                "Backup",
                "Restore"
              ],
              "certificates": [
                "Get",
                "List",
                "Update",
                "Create",
                "Import",
                "Delete",
                "Recover",
                "Backup",
                "Restore",
                "ManageContacts",
                "ManageIssuers",
                "GetIssuers",
                "ListIssuers",
                "SetIssuers",
                "DeleteIssuers"
              ]
            }
          }
        ],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "enableSoftDelete": true
      }
    },
    {
      "type": "microsoft.operationalinsights/workspaces",
      "apiVersion": "2015-11-01-preview",
      "name": "[variables('workspaces_secretandconfiglogworkspace_name')]",
      "location": "[parameters('location')]",
      "properties": {
        "provisioningState": "Succeeded",
        "sku": {
          "name": "pergb2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('serverfarms_SecretAndConfigAppPlan_name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "F1",
        "tier": "Free",
        "size": "F1",
        "family": "F",
        "capacity": 0
      },
      "kind": "app",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_General|AlphabeticallySortedComputers')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Computers with their most recent data",
        "Category": "General Exploration",
        "Query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize AggregatedValue = max(TimeGenerated) by Computer | limit 500000 | sort by Computer asc\r\n// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) by Computer | top 500000 | Sort Computer // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_General|dataPointsPerManagementGroup')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Which Management Group is generating the most data points?",
        "Category": "General Exploration",
        "Query": "search * | summarize AggregatedValue = count() by ManagementGroupName\r\n// Oql: * | Measure count() by ManagementGroupName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_General|dataTypeDistribution')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Distribution of data Types",
        "Category": "General Exploration",
        "Query": "search * | extend Type = $table | summarize AggregatedValue = count() by Type\r\n// Oql: * | Measure count() by Type // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_General|StaleComputers')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Stale Computers (data older than 24 hours)",
        "Category": "General Exploration",
        "Query": "search not(ObjectName == \"Advisor Metrics\" or ObjectName == \"ManagedSpace\") | summarize lastdata = max(TimeGenerated) by Computer | limit 500000 | where lastdata < ago(24h)\r\n// Oql: NOT(ObjectName=\"Advisor Metrics\" OR ObjectName=ManagedSpace) | measure max(TimeGenerated) as lastdata by Computer | top 500000 | where lastdata < NOW-24HOURS // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AllEvents')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Events",
        "Category": "Log Management",
        "Query": "Event | sort by TimeGenerated desc\r\n// Oql: Type=Event // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AllSyslog')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Syslogs",
        "Category": "Log Management",
        "Query": "Syslog | sort by TimeGenerated desc\r\n// Oql: Type=Syslog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AllSyslogByFacility')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Syslog Records grouped by Facility",
        "Category": "Log Management",
        "Query": "Syslog | summarize AggregatedValue = count() by Facility\r\n// Oql: Type=Syslog | Measure count() by Facility // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AllSyslogByProcessName')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Syslog Records grouped by ProcessName",
        "Category": "Log Management",
        "Query": "Syslog | summarize AggregatedValue = count() by ProcessName\r\n// Oql: Type=Syslog | Measure count() by ProcessName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AllSyslogsWithErrors')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Syslog Records with Errors",
        "Category": "Log Management",
        "Query": "Syslog | where SeverityLevel == \"error\" | sort by TimeGenerated desc\r\n// Oql: Type=Syslog SeverityLevel=error // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AverageHTTPRequestTimeByClientIPAddress')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Average HTTP Request time by Client IP Address",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = avg(TimeTaken) by cIP\r\n// Oql: Type=W3CIISLog | Measure Avg(TimeTaken) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|AverageHTTPRequestTimeHTTPMethod')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Average HTTP Request time by HTTP Method",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = avg(TimeTaken) by csMethod\r\n// Oql: Type=W3CIISLog | Measure Avg(TimeTaken) by csMethod // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountIISLogEntriesClientIPAddress')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of IIS Log Entries by Client IP Address",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by cIP\r\n// Oql: Type=W3CIISLog | Measure count() by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountIISLogEntriesHTTPRequestMethod')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of IIS Log Entries by HTTP Request Method",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csMethod\r\n// Oql: Type=W3CIISLog | Measure count() by csMethod // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountIISLogEntriesHTTPUserAgent')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of IIS Log Entries by HTTP User Agent",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUserAgent\r\n// Oql: Type=W3CIISLog | Measure count() by csUserAgent // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountOfIISLogEntriesByHostRequestedByClient')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of IIS Log Entries by Host requested by client",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csHost\r\n// Oql: Type=W3CIISLog | Measure count() by csHost // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountOfIISLogEntriesByURLForHost')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of IIS Log Entries by URL for the host \"www.contoso.com\" (replace with your own)",
        "Category": "Log Management",
        "Query": "search csHost == \"www.contoso.com\" | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog csHost=\"www.contoso.com\" | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountOfIISLogEntriesByURLRequestedByClient')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of IIS Log Entries by URL requested by client (without query strings)",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|CountOfWarningEvents')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of Events with level \"Warning\" grouped by Event ID",
        "Category": "Log Management",
        "Query": "Event | where EventLevelName == \"warning\" | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event EventLevelName=warning | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|DisplayBreakdownRespondCodes')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Shows breakdown of response codes",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by scStatus\r\n// Oql: Type=W3CIISLog | Measure count() by scStatus // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|EventsByEventLog')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of Events grouped by Event Log",
        "Category": "Log Management",
        "Query": "Event | summarize AggregatedValue = count() by EventLog\r\n// Oql: Type=Event | Measure count() by EventLog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|EventsByEventsID')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of Events grouped by Event ID",
        "Category": "Log Management",
        "Query": "Event | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|EventsByEventSource')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of Events grouped by Event Source",
        "Category": "Log Management",
        "Query": "Event | summarize AggregatedValue = count() by Source\r\n// Oql: Type=Event | Measure count() by Source // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|EventsInOMBetween2000to3000')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Events in the Operations Manager Event Log whose Event ID is in the range between 2000 and 3000",
        "Category": "Log Management",
        "Query": "Event | where EventLog == \"Operations Manager\" and EventID >= 2000 and EventID <= 3000 | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLog=\"Operations Manager\" EventID:[2000..3000] // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|EventsWithStartedinEventID')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Count of Events containing the word \"started\" grouped by EventID",
        "Category": "Log Management",
        "Query": "search in (Event) \"started\" | summarize AggregatedValue = count() by EventID\r\n// Oql: Type=Event \"started\" | Measure count() by EventID // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|FindMaximumTimeTakenForEachPage')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Find the maximum time taken for each page",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = max(TimeTaken) by csUriStem\r\n// Oql: Type=W3CIISLog | Measure Max(TimeTaken) by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|IISLogEntriesForClientIP')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "IIS Log Entries for a specific client IP Address (replace with your own)",
        "Category": "Log Management",
        "Query": "search cIP == \"192.168.0.1\" | extend Type = $table | where Type == W3CIISLog | sort by TimeGenerated desc | project csUriStem, scBytes, csBytes, TimeTaken, scStatus\r\n// Oql: Type=W3CIISLog cIP=\"192.168.0.1\" | Select csUriStem,scBytes,csBytes,TimeTaken,scStatus // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|ListAllIISLogEntries')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All IIS Log Entries",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | sort by TimeGenerated desc\r\n// Oql: Type=W3CIISLog // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|NoOfConnectionsToOMSDKService')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "How many connections to Operations Manager's SDK service by day",
        "Category": "Log Management",
        "Query": "Event | where EventID == 26328 and EventLog == \"Operations Manager\" | summarize AggregatedValue = count() by bin(TimeGenerated, 1d) | sort by TimeGenerated desc\r\n// Oql: Type=Event EventID=26328 EventLog=\"Operations Manager\" | Measure count() interval 1DAY // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|ServerRestartTime')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "When did my servers initiate restart?",
        "Category": "Log Management",
        "Query": "search in (Event) \"shutdown\" and EventLog == \"System\" and Source == \"User32\" and EventID == 1074 | sort by TimeGenerated desc | project TimeGenerated, Computer\r\n// Oql: shutdown Type=Event EventLog=System Source=User32 EventID=1074 | Select TimeGenerated,Computer // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|Show404PagesList')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Shows which pages people are getting a 404 for",
        "Category": "Log Management",
        "Query": "search scStatus == 404 | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by csUriStem\r\n// Oql: Type=W3CIISLog scStatus=404 | Measure count() by csUriStem // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|ShowServersThrowingInternalServerError')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Shows servers that are throwing internal server error",
        "Category": "Log Management",
        "Query": "search scStatus == 500 | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = count() by sComputerName\r\n// Oql: Type=W3CIISLog scStatus=500 | Measure count() by sComputerName // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|TotalBytesReceivedByEachAzureRoleInstance')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Total Bytes received by each Azure Role Instance",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by RoleInstance\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by RoleInstance // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|TotalBytesReceivedByEachIISComputer')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Total Bytes received by each IIS Computer",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by Computer | limit 500000\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by Computer | top 500000 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|TotalBytesRespondedToClientsByClientIPAddress')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Total Bytes responded back to clients by Client IP Address",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(scBytes) by cIP\r\n// Oql: Type=W3CIISLog | Measure Sum(scBytes) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|TotalBytesRespondedToClientsByEachIISServerIPAddress')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Total Bytes responded back to clients by each IIS ServerIP Address",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(scBytes) by sIP\r\n// Oql: Type=W3CIISLog | Measure Sum(scBytes) by sIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|TotalBytesSentByClientIPAddress')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Total Bytes sent by Client IP Address",
        "Category": "Log Management",
        "Query": "search * | extend Type = $table | where Type == W3CIISLog | summarize AggregatedValue = sum(csBytes) by cIP\r\n// Oql: Type=W3CIISLog | Measure Sum(csBytes) by cIP // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PEF: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|WarningEvents')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "All Events with level \"Warning\"",
        "Category": "Log Management",
        "Query": "Event | where EventLevelName == \"warning\" | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLevelName=warning // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|WindowsFireawallPolicySettingsChanged')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "Windows Firewall Policy settings have changed",
        "Category": "Log Management",
        "Query": "Event | where EventLog == \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" and EventID == 2008 | sort by TimeGenerated desc\r\n// Oql: Type=Event EventLog=\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" EventID=2008 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
      "apiVersion": "2015-03-20",
      "name": "[concat(variables('workspaces_secretandconfiglogworkspace_name'), '/LogManagement(', variables('workspaces_secretandconfiglogworkspace_name'), ')_LogManagement|WindowsFireawallPolicySettingsChangedByMachines')]",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaces_secretandconfiglogworkspace_name'))]"
      ],
      "properties": {
        "DisplayName": "On which machines and how many times have Windows Firewall Policy settings changed",
        "Category": "Log Management",
        "Query": "Event | where EventLog == \"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" and EventID == 2008 | summarize AggregatedValue = count() by Computer | limit 500000\r\n// Oql: Type=Event EventLog=\"Microsoft-Windows-Windows Firewall With Advanced Security/Firewall\" EventID=2008 | measure count() by Computer | top 500000 // Args: {OQ: True; WorkspaceId: 00000000-0000-0000-0000-000000000000} // Settings: {PTT: True; SortI: True; SortF: True} // Version: 0.1.122",
        "Version": 2
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('sites_secretandconfig_name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_SecretAndConfigAppPlan_name'))]"
      ],
      "kind": "app",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(variables('sites_secretandconfig_name'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(variables('sites_secretandconfig_name'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('serverfarms_SecretAndConfigAppPlan_name'))]",
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_secretandconfig_name'), '/web')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_secretandconfig_name'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "phpVersion": "5.6",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "$secretandconfig",
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": false,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": false
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(variables('sites_secretandconfig_name'), '/', variables('sites_secretandconfig_name'), '.azurewebsites.net')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('sites_secretandconfig_name'))]"
      ],
      "properties": {
        "siteName": "secretandconfig",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "microsoft.alertsmanagement/smartdetectoralertrules",
      "apiVersion": "2019-06-01",
      "name": "[parameters('smartdetectoralertrules_failure_anomalies___secretandconfigappinsight_name')]",
      "location": "global",
      "dependsOn": [
        "[resourceId('microsoft.insights/components', variables('components_SecretAndConfigAppInsight_name'))]",
        "[resourceId('microsoft.insights/actionGroups', parameters('actionGroups_Application_Insights_Smart_Detection_name'))]"
      ],
      "properties": {
        "description": "Failure Anomalies notifies you of an unusual rise in the rate of failed HTTP requests or dependency calls.",
        "state": "Enabled",
        "severity": "Sev3",
        "frequency": "PT1M",
        "detector": {
          "id": "FailureAnomaliesDetector",
          "name": "Failure Anomalies",
          "description": "Detects if your application experiences an abnormal rise in the rate of HTTP requests or dependency calls that are reported as failed. The anomaly detection uses machine learning algorithms and occurs in near real time, therefore there's no need to define a frequency for this signal.<br/></br/>To help you triage and diagnose the problem, an analysis of the characteristics of the failures and related telemetry is provided with the detection. This feature works for any app, hosted in the cloud or on your own servers, that generates request or dependency telemetry - for example, if you have a worker role that calls <a class=\"ext-smartDetecor-link\" href=\\\"https://docs.microsoft.com/azure/application-insights/app-insights-api-custom-events-metrics#trackrequest\\\" target=\\\"_blank\\\">TrackRequest()</a> or <a class=\"ext-smartDetecor-link\" href=\\\"https://docs.microsoft.com/azure/application-insights/app-insights-api-custom-events-metrics#trackdependency\\\" target=\\\"_blank\\\">TrackDependency()</a>.<br/><br/><a class=\"ext-smartDetecor-link\" href=\\\"https://docs.microsoft.com/azure/azure-monitor/app/proactive-failure-diagnostics\\\" target=\\\"_blank\\\">Learn more about Failure Anomalies</a>",
          "supportedResourceTypes": [
            "ApplicationInsights"
          ]
        },
        "scope": [
          "[resourceId('microsoft.insights/components', variables('components_SecretAndConfigAppInsight_name'))]"
        ],
        "actionGroups": {
          "groupIds": [
            "[resourceId('microsoft.insights/actionGroups', parameters('actionGroups_Application_Insights_Smart_Detection_name'))]"
          ]
        }
      }
    }
  ]
}